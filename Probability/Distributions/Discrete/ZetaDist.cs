#region

using System;
using HC.Analytics.Probability.Random;

#endregion

namespace HC.Analytics.Probability.Distributions.Discrete
{
    public class ZetaDist : AbstractUnivDiscrDist
    {
        #region Constants

        private const int INT_RND_SEED = 34;

        #endregion

        #region Memebers

        /// <summary>
        /// Own instance
        /// </summary>
        private static readonly ZetaDist m_ownInstance = new ZetaDist(
            1, 1, new RngWrapper(INT_RND_SEED));

        // cached values (for performance)
        private double m_dblC;
        private double m_dblD;
        private double m_dblMaxlongint = long.MaxValue - 1.5;
        private double m_dblPk;
        private double m_dblPkPrev = -1.0;
        private double m_dblRo;
        private double m_dblRoPrev = -1.0;

        #endregion

        #region Constructors

        public ZetaDist(
            double dblRo,
            double dblPk,
            RngWrapper rng) : base(rng)
        {
            SetState(
                dblRo,
                dblPk);
        }

        #endregion

        #region Parameters

        public double Ro
        {
            get { return m_dblRo; }
            set
            {
                m_dblRo = value;
                SetState(
                    m_dblRo,
                    m_dblPk);
            }
        }

        public double Pk
        {
            get { return m_dblPk; }
            set
            {
                m_dblPk = value;
                SetState(
                    m_dblRo,
                    m_dblPk);
            }
        }

        #endregion

        #region Initialization

        private void SetState(
            double dblRo,
            double dblPk)
        {
            m_dblRo = dblRo;
            m_dblPk = dblPk;
        }

        #endregion

        #region Public

        /**
 * Returns a zeta distributed random number.
 */

        public override int NextInt()
        {
            /******************************************************************
             *                                                                *
             *            Zeta Distribution - Acceptance Rejection            *
             *                                                                *
             ******************************************************************
             *                                                                *
             * To sample from the Zeta distribution with parameters ro and pk *
             * it suffices to sample variates x from the distribution with    *
             * density function  f(x)=B*{[x+0.5]+pk}^(-(1+ro)) ( x > .5 )     *
             * and then deliver k=[x+0.5].                                    *
             * 1/B=Sum[(j+pk)^-(ro+1)]  (j=1,2,...) converges for ro >= .5 .  *
             * It is not necessary to compute B, because variates x are       *
             * generated by acceptance rejection using density function       *
             * g(x)=ro*(c+0.5)^ro*(c+x)^-(ro+1).                              *
             *                                                                *                                                                *
             * Integer overflow is possible, when ro is small (ro <= .5) and  *
             * pk large. In this case a new sample is generated. If ro and pk *
             * satisfy the inequality   ro > .14 + pk*1.85e-8 + .02*ln(pk)    *
             * the percentage of overflow is less than 1%, so that the        *
             * result is reliable.                                            *
             * NOTE: The comment above is likely to be nomore valid since     *
             * the C-version operated on 32-bit integers, while this Java     *
             * version operates on 64-bit integers. However, the following is *
             * still valid:                                                   *                                                                *
             *                                                                *                                                                *
             * If either ro > 100  or  k > 10000 numerical problems in        *
             * computing the theoretical moments arise, therefore ro<=100 and *
             * k<=10000 are recommended.                                      *
             *                                                                *
             ******************************************************************
             *                                                                *
             * FUNCTION:    - zeta  samples a random number from the          *
             *                Zeta distribution with parameters  ro > 0  and  *
             *                pk >= 0.                                        *
             * REFERENCE:   - J. Dagpunar (1988): Principles of Random        *
             *                Variate  Generation, Clarendon Press, Oxford.   *
             *                                                                *
             ******************************************************************/
            double u, v, e, x;
            int k;

            if (Ro != m_dblRoPrev || Pk != m_dblPkPrev)
            {
                // Set-up
                m_dblRoPrev = Ro;
                m_dblPkPrev = Pk;
                if (Ro < Pk)
                {
                    m_dblC = Pk - 0.5;
                    m_dblD = 0;
                }
                else
                {
                    m_dblC = Ro - 0.5;
                    m_dblD = (1.0 + Ro)*Math.Log((1.0 + Pk)/(1.0 + Ro));
                }
            }
            do
            {
                do
                {
                    u = m_rng.NextDouble();
                    v = m_rng.NextDouble();
                    x = (m_dblC + 0.5)*Math.Exp(-Math.Log(u)/Ro) - m_dblC;
                }
                while (x <= 0.5 || x >= m_dblMaxlongint);

                k = (int) (x + 0.5);
                e = -Math.Log(v);
            }
            while (e < (1.0 + Ro)*Math.Log((k + Pk)/(x + m_dblC)) - m_dblD);

            return k;
        }

        /**
        * Returns a string representation of the receiver.
        */

        public override string ToString()
        {
            return "Zeta(" + Ro + "," + Pk + ")";
        }

        public override double Cdf(int intX)
        {
            throw new NotImplementedException();
        }

        public override int CdfInv(double dblProbability)
        {
            throw new NotImplementedException();
        }

        public override double Pdf(int intX)
        {
            throw new NotImplementedException();
        }

        #endregion

        #region StaticMethods

        public static double PdfStatic(
            double dblP,
            int intN,
            int intX)
        {
            m_ownInstance.SetState(
                dblP,
                intN);

            return m_ownInstance.Pdf(intX);
        }

        public static double CdfStatic(
            double dblP,
            int intN,
            int intX)
        {
            m_ownInstance.SetState(
                dblP,
                intN);

            return m_ownInstance.Cdf(intX);
        }

        public static double CdfInvStatic(
            double dblP,
            int intN,
            double dblProbability)
        {
            m_ownInstance.SetState(
                dblP,
                intN);

            return m_ownInstance.CdfInv(dblProbability);
        }

        public static double NextIntStatic(
            double dblP,
            int intN)
        {
            m_ownInstance.SetState(
                dblP,
                intN);

            return m_ownInstance.NextInt();
        }

        public static int[] NextIntArrStatic(
            double dblP,
            int intN,
            int intSampleSize)
        {
            m_ownInstance.SetState(
                dblP,
                intN);

            return m_ownInstance.NextIntArr(intSampleSize);
        }

        #endregion
    }
}
