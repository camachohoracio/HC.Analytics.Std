#region

using System;

#endregion

namespace HC.Analytics.Mathematics.Functions
{
    public static class InvNormalFunct
    {
        public static double InvNormal(
            double dblY)
        {
            double result = 0;
            double expm2 = 0;
            double s2pi = 0;
            double x = 0;
            double y = 0;
            double z = 0;
            double y2 = 0;
            double x0 = 0;
            double x1 = 0;
            int code = 0;
            double p0 = 0;
            double q0 = 0;
            double p1 = 0;
            double q1 = 0;
            double p2 = 0;
            double q2 = 0;

            expm2 = 0.13533528323661269189;
            s2pi = 2.50662827463100050242;
            if (dblY <= 0)
            {
                result = -MathConstants.MAX_REAL_NUMBER;
                return result;
            }
            if (dblY >= 1)
            {
                result = MathConstants.MAX_REAL_NUMBER;
                return result;
            }
            code = 1;
            y = dblY;
            if (y > 1.0 - expm2)
            {
                y = 1.0 - y;
                code = 0;
            }
            if (y > expm2)
            {
                y = y - 0.5;
                y2 = y*y;
                p0 = -59.9633501014107895267;
                p0 = 98.0010754185999661536 + y2*p0;
                p0 = -56.6762857469070293439 + y2*p0;
                p0 = 13.9312609387279679503 + y2*p0;
                p0 = -1.23916583867381258016 + y2*p0;
                q0 = 1;
                q0 = 1.95448858338141759834 + y2*q0;
                q0 = 4.67627912898881538453 + y2*q0;
                q0 = 86.3602421390890590575 + y2*q0;
                q0 = -225.462687854119370527 + y2*q0;
                q0 = 200.260212380060660359 + y2*q0;
                q0 = -82.0372256168333339912 + y2*q0;
                q0 = 15.9056225126211695515 + y2*q0;
                q0 = -1.18331621121330003142 + y2*q0;
                x = y + y*y2*p0/q0;
                x = x*s2pi;
                result = x;
                return result;
            }
            x = Math.Sqrt(-(2.0*Math.Log(y)));
            x0 = x - Math.Log(x)/x;
            z = 1.0/x;
            if (x < 8.0)
            {
                p1 = 4.05544892305962419923;
                p1 = 31.5251094599893866154 + z*p1;
                p1 = 57.1628192246421288162 + z*p1;
                p1 = 44.0805073893200834700 + z*p1;
                p1 = 14.6849561928858024014 + z*p1;
                p1 = 2.18663306850790267539 + z*p1;
                p1 = -(1.40256079171354495875*0.1) + z*p1;
                p1 = -(3.50424626827848203418*0.01) + z*p1;
                p1 = -(8.57456785154685413611*0.0001) + z*p1;
                q1 = 1;
                q1 = 15.7799883256466749731 + z*q1;
                q1 = 45.3907635128879210584 + z*q1;
                q1 = 41.3172038254672030440 + z*q1;
                q1 = 15.0425385692907503408 + z*q1;
                q1 = 2.50464946208309415979 + z*q1;
                q1 = -(1.42182922854787788574*0.1) + z*q1;
                q1 = -(3.80806407691578277194*0.01) + z*q1;
                q1 = -(9.33259480895457427372*0.0001) + z*q1;
                x1 = z*p1/q1;
            }
            else
            {
                p2 = 3.23774891776946035970;
                p2 = 6.91522889068984211695 + z*p2;
                p2 = 3.93881025292474443415 + z*p2;
                p2 = 1.33303460815807542389 + z*p2;
                p2 = 2.01485389549179081538*0.1 + z*p2;
                p2 = 1.23716634817820021358*0.01 + z*p2;
                p2 = 3.01581553508235416007*0.0001 + z*p2;
                p2 = 2.65806974686737550832*0.000001 + z*p2;
                p2 = 6.23974539184983293730*0.000000001 + z*p2;
                q2 = 1;
                q2 = 6.02427039364742014255 + z*q2;
                q2 = 3.67983563856160859403 + z*q2;
                q2 = 1.37702099489081330271 + z*q2;
                q2 = 2.16236993594496635890*0.1 + z*q2;
                q2 = 1.34204006088543189037*0.01 + z*q2;
                q2 = 3.28014464682127739104*0.0001 + z*q2;
                q2 = 2.89247864745380683936*0.000001 + z*q2;
                q2 = 6.79019408009981274425*0.000000001 + z*q2;
                x1 = z*p2/q2;
            }
            x = x0 - x1;
            if (code != 0)
            {
                x = -x;
            }
            result = x;
            return result;
        }

        public static double InvNormal2(double p)
        {
            //redu with apstat 241
            //return VisualNumerics.math.Statistics.inverseNormalCdf(p);
            if (Double.IsNaN(p))
            {
                return 0;
            }
            double q = p - 0.5;
            double r;
            if (Math.Abs(q) <= 0.425)
            {
                r = 0.180625 - q*q;
                return q
                       *(((((((r*2509.0809287301226727 + 33430.575583588128105)*r
                              + 67265.770927008700853)
                             *r
                             + 45921.953931549871457)
                            *r
                            + 13731.693765509461125)
                           *r
                           + 1971.5909503065514427)
                          *r
                          + 133.14166789178437745)
                         *r
                         + 3.387132872796366608)
                       /(((((((r*5226.495278852854561 + 28729.085735721942674)*r
                              + 39307.89580009271061)
                             *r
                             + 21213.794301586595867)
                            *r
                            + 5394.1960214247511077)
                           *r
                           + 687.1870074920579083)
                          *r
                          + 42.313330701600911252)
                         *r
                         + 1);
            }
            r = Math.Min(1 - p, p);
            if (r <= 0)
            {
                return p > 0 ? Double.PositiveInfinity : Double.NegativeInfinity;
            }
            r = Math.Sqrt(-Math.Log(r));
            if (r <= 5)
            {
                r += -1.6;
                return (q < 0 ? -1 : 1)
                       *(((((((r*7.7454501427834140764e-4 + .0227238449892691845833)*r
                              + .24178072517745061177)
                             *r
                             + 1.27045825245236838258)
                            *r
                            + 3.64784832476320460504)
                           *r
                           + 5.7694972214606914055)
                          *r
                          + 4.6303378461565452959)
                         *r
                         + 1.42343711074968357734)
                       /(((((((r*1.05075007164441684324e-9 + 5.475938084995344946e-4)*r
                              + .0151986665636164571966)
                             *r
                             + .14810397642748007459)
                            *r
                            + .68976733498510000455)
                           *r
                           + 1.6763848301838038494)
                          *r
                          + 2.05319162663775882187)
                         *r
                         + 1.0);
            }
            r += -5.0;
            return (q < 0 ? -1 : 1)
                   *(((((((r*2.01033439929228813265e-7 + 2.71155556874348757815e-5)*r
                          + .0012426609473880784386)
                         *r
                         + .026532189526576123093)
                        *r
                        + .29656057182850489123)
                       *r
                       + 1.7848265399172913358)
                      *r
                      + 5.4637849111641143699)
                     *r
                     + 6.6579046435011037772)
                   /(((((((r*2.04426310338993978564e-15 + 1.4215117583164458887e-7)*r
                          + 1.8463183175100546818e-5)
                         *r
                         + 7.868691311456132591e-4)
                        *r
                        + .0148753612908506148525)
                       *r
                       + .13692988092273580531)
                      *r
                      + .59983220655588793769)
                     *r
                     + 1.0);
        }
    }
}
